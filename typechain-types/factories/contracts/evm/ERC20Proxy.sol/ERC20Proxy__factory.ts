/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ERC20Proxy,
  ERC20ProxyInterface,
} from "../../../../contracts/evm/ERC20Proxy.sol/ERC20Proxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "zetaTxSenderAddress",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "sourceChainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "destinationAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "internalSendHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "ERC20CustodyAddress",
        type: "address",
      },
    ],
    name: "onZRC20WithdrawAndCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506106e8806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636ef40b3b14610030575b600080fd5b61004a6004803603810190610045919061029e565b61004c565b005b600063d9caed1260e01b88888860405160240161006b9392919061045a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008273ffffffffffffffffffffffffffffffffffffffff16826040516100f19190610443565b600060405180830381855af49150503d806000811461012c576040519150601f19603f3d011682016040523d82523d6000602084013e610131565b606091505b5050905080610175576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016c90610504565b60405180910390fd5b60008686905011156101fb578873ffffffffffffffffffffffffffffffffffffffff1663be2c0a868d8d8d8d8d8d8d8d6040518963ffffffff1660e01b81526004016101c8989796959493929190610491565b600060405180830381600087803b1580156101e257600080fd5b505af11580156101f6573d6000803e3d6000fd5b505050505b505050505050505050505050565b6000813590506102188161066d565b92915050565b60008135905061022d81610684565b92915050565b60008083601f8401126102495761024861061f565b5b8235905067ffffffffffffffff8111156102665761026561061a565b5b60208301915083600182028301111561028257610281610624565b5b9250929050565b6000813590506102988161069b565b92915050565b6000806000806000806000806000806101008b8d0312156102c2576102c161062e565b5b60008b013567ffffffffffffffff8111156102e0576102df610629565b5b6102ec8d828e01610233565b9a509a505060206102ff8d828e01610289565b98505060406103108d828e01610209565b97505060606103218d828e01610209565b96505060806103328d828e01610289565b95505060a08b013567ffffffffffffffff81111561035357610352610629565b5b61035f8d828e01610233565b945094505060c06103728d828e0161021e565b92505060e06103838d828e01610209565b9150509295989b9194979a5092959850565b61039e8161055c565b82525050565b60006103b0838561052f565b93506103bd8385846105d8565b6103c683610633565b840190509392505050565b60006103dc82610524565b6103e68185610540565b93506103f68185602086016105e7565b80840191505092915050565b61040b816105a2565b82525050565b600061041e60208361054b565b915061042982610644565b602082019050919050565b61043d81610598565b82525050565b600061044f82846103d1565b915081905092915050565b600060608201905061046f6000830186610395565b61047c6020830185610402565b6104896040830184610434565b949350505050565b600060c08201905081810360008301526104ac818a8c6103a4565b90506104bb6020830189610434565b6104c86040830188610395565b6104d56060830187610395565b6104e26080830186610434565b81810360a08301526104f58184866103a4565b90509998505050505050505050565b6000602082019050818103600083015261051d81610411565b9050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061056782610578565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006105ad826105b4565b9050919050565b60006105bf826105c6565b9050919050565b60006105d182610578565b9050919050565b82818337600083830152505050565b60005b838110156106055780820151818401526020810190506105ea565b83811115610614576000848401525b50505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f64656c65676174652063616c6c20746f207769746864726177206661696c6564600082015250565b6106768161055c565b811461068157600080fd5b50565b61068d8161056e565b811461069857600080fd5b50565b6106a481610598565b81146106af57600080fd5b5056fea2646970667358221220de92b12af44bab9721640d37f30221e72384c9344cb94f379d4e4074e314922264736f6c63430008070033";

type ERC20ProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20ProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Proxy__factory extends ContractFactory {
  constructor(...args: ERC20ProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20Proxy> {
    return super.deploy(overrides || {}) as Promise<ERC20Proxy>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC20Proxy {
    return super.attach(address) as ERC20Proxy;
  }
  override connect(signer: Signer): ERC20Proxy__factory {
    return super.connect(signer) as ERC20Proxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20ProxyInterface {
    return new utils.Interface(_abi) as ERC20ProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Proxy {
    return new Contract(address, _abi, signerOrProvider) as ERC20Proxy;
  }
}
